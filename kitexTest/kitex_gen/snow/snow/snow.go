// Code generated by Kitex v0.2.0. DO NOT EDIT.

package snow

import (
	"context"
	"github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	"test1/kitexTest/kitex_gen/snow"
)

func serviceInfo() *kitex.ServiceInfo {
	return snowServiceInfo
}

var snowServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "Snow"
	handlerType := (*snow.Snow)(nil)
	methods := map[string]kitex.MethodInfo{
		"wanted": kitex.NewMethodInfo(wantedHandler, newSnowWantedArgs, newSnowWantedResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "snow",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.2.0",
		Extra:           extra,
	}
	return svcInfo
}

func wantedHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*snow.SnowWantedArgs)
	realResult := result.(*snow.SnowWantedResult)
	success, err := handler.(snow.Snow).Wanted(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSnowWantedArgs() interface{} {
	return snow.NewSnowWantedArgs()
}

func newSnowWantedResult() interface{} {
	return snow.NewSnowWantedResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Wanted(ctx context.Context, req *snow.SnowRequest) (r *snow.SnowResponse, err error) {
	var _args snow.SnowWantedArgs
	_args.Req = req
	var _result snow.SnowWantedResult
	if err = p.c.Call(ctx, "wanted", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
